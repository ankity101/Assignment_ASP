// <auto-generated />
using Assignment_ASP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment_ASP.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230819121541_AddingManyToManyRelationshipUpdated")]
    partial class AddingManyToManyRelationshipUpdated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assignment_ASP.Model.FriendsModel", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("friends");

                    b.HasData(
                        new
                        {
                            Name = "Saurabh",
                            ProfileImage = "Profile-img.jpg"
                        });
                });

            modelBuilder.Entity("Assignment_ASP.Model.PostDataModel", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("postData");

                    b.HasData(
                        new
                        {
                            Name = "Test",
                            PostImage = "Test-img.jpg",
                            ProfileImage = "Profile-test-img.jpg",
                            Time = "18th Aug"
                        });
                });

            modelBuilder.Entity("Assignment_ASP.Model.UserFriends", b =>
                {
                    b.Property<int>("UserModelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserModelId", "Name");

                    b.HasIndex("Name");

                    b.ToTable("UserFriends");
                });

            modelBuilder.Entity("Assignment_ASP.Model.UserModel", b =>
                {
                    b.Property<int>("UserModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserModelId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserModelId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Assignment_ASP.Model.UserFriends", b =>
                {
                    b.HasOne("Assignment_ASP.Model.FriendsModel", "friends")
                        .WithMany("users")
                        .HasForeignKey("Name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_ASP.Model.UserModel", "Users")
                        .WithMany("friends")
                        .HasForeignKey("UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");

                    b.Navigation("friends");
                });

            modelBuilder.Entity("Assignment_ASP.Model.FriendsModel", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("Assignment_ASP.Model.UserModel", b =>
                {
                    b.Navigation("friends");
                });
#pragma warning restore 612, 618
        }
    }
}
